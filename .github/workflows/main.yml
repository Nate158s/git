name: CI/PR

on: [push, pull_request]

env:
  DEVELOPER: 1

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: git-for-windows/setup-git-for-windows-sdk@v1
    - name: Get MSYS2 runtime v3.2.0
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yaml
        branch: rebase-to-v3.2.0
        path: C:/git-sdk-64-minimal
        repo: dscho/msys2-runtime
    - name: move MSYS2 runtime into the correct location
      shell: powershell
      run: |
        & "C:\Program Files\Git\bin\bash.exe" -c "cd /c/git-sdk-64-minimal && cp -R install/* ./"
    - name: Verify the MSYS2 runtime version
      shell: bash
      run: set -x && test 3.2.0-340.x86_64 = "$(uname.exe -r)"
    - name: build
      shell: bash
      env:
        HOME: ${{runner.workspace}}
        NO_PERL: 1
      run: ci/make-test-artifacts.sh artifacts
    - name: zip up tracked files
      run: git archive -o artifacts/tracked.tar.gz HEAD
    - name: upload tracked files and build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-artifacts
        path: artifacts
  windows-test:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      fail-fast: false
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - name: download tracked files and build artifacts
      uses: actions/download-artifact@v2
      with:
        name: windows-artifacts
        path: ${{github.workspace}}
    - name: extract tracked files and build artifacts
      shell: bash
      run: tar xf artifacts.tar.gz && tar xf tracked.tar.gz
    - uses: git-for-windows/setup-git-for-windows-sdk@v1
    - name: Get MSYS2 runtime v3.2.0
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yaml
        branch: rebase-to-v3.2.0
        path: C:/git-sdk-64-minimal
        repo: dscho/msys2-runtime
    - name: move MSYS2 runtime into the correct location
      shell: powershell
      run: |
        & "C:\Program Files\Git\bin\bash.exe" -c "cd /c/git-sdk-64-minimal && cp -R install/* ./"
    - name: Verify the MSYS2 runtime version
      shell: bash
      run: set -x && test 3.2.0-340.x86_64 = "$(uname.exe -r)"
    - name: test
      shell: bash
      run: ci/run-test-slice.sh ${{matrix.nr}} 10
    - name: ci/print-test-failures.sh
      if: failure()
      shell: bash
      run: ci/print-test-failures.sh
    - name: Upload failed tests' directories
      if: failure() && env.FAILED_TEST_ARTIFACTS != ''
      uses: actions/upload-artifact@v2
      with:
        name: failed-tests-windows
        path: ${{env.FAILED_TEST_ARTIFACTS}}
  vs-build:
    timeout-minutes: 15
    env:
      NO_PERL: 1
      GIT_CONFIG_PARAMETERS: "'user.name=CI' 'user.email=ci@git'"
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
    - uses: actions/checkout@v2
    - uses: git-for-windows/setup-git-for-windows-sdk@v1
    - name: Get MSYS2 runtime v3.2.0
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yaml
        branch: rebase-to-v3.2.0
        path: C:/git-sdk-64-minimal
        repo: dscho/msys2-runtime
    - name: move MSYS2 runtime into the correct location
      shell: powershell
      run: |
        & "C:\Program Files\Git\bin\bash.exe" -c "cd /c/git-sdk-64-minimal && cp -R install/* ./"
    - name: Verify the MSYS2 runtime version
      shell: bash
      run: set -x && test 3.2.0-340.x86_64 = "$(uname.exe -r)"
    - name: initialize vcpkg
      uses: actions/checkout@v2
      with:
        repository: 'microsoft/vcpkg'
        path: 'compat/vcbuild/vcpkg'
    - name: download vcpkg artifacts
      uses: git-for-windows/get-azure-pipelines-artifact@v0
      with:
        repository: git/git
        definitionId: 9
    - name: add msbuild to PATH
      uses: microsoft/setup-msbuild@v1
    - name: copy dlls to root
      shell: cmd
      run: compat\vcbuild\vcpkg_copy_dlls.bat release ${{ matrix.arch }}-windows
    - name: generate Visual Studio solution
      shell: bash
      run: |
        cmake `pwd`/contrib/buildsystems/ -DCMAKE_PREFIX_PATH=`pwd`/compat/vcbuild/vcpkg/installed/${{ matrix.arch }}-windows \
        -DNO_GETTEXT=YesPlease -DPERL_TESTS=OFF -DPYTHON_TESTS=OFF -DCURL_NO_CURL_CMAKE=ON -DCMAKE_GENERATOR_PLATFORM=${{ matrix.arch }} -DVCPKG_ARCH=${{ matrix.arch }}-windows
    - name: MSBuild
      run: msbuild git.sln -property:Configuration=Release -property:Platform=${{ matrix.arch }} -maxCpuCount:4 -property:PlatformToolset=v142
    - name: bundle artifact tar
      shell: bash
      env:
        MSVC: 1
        VCPKG_ROOT: ${{github.workspace}}\compat\vcbuild\vcpkg
      run: |
        mkdir -p artifacts &&
        eval "$(make -n artifacts-tar INCLUDE_DLLS_IN_ARTIFACTS=YesPlease ARTIFACTS_DIRECTORY=artifacts 2>&1 | grep ^tar)"
    - name: zip up tracked files
      run: git archive -o artifacts/tracked.tar.gz HEAD
    - name: upload tracked files and build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: vs-artifacts-${{ matrix.arch }}
        path: artifacts
  vs-test:
    runs-on: windows-latest
    needs: vs-build
    strategy:
      fail-fast: false
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: git-for-windows/setup-git-for-windows-sdk@v1
    - name: Get MSYS2 runtime v3.2.0
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yaml
        branch: rebase-to-v3.2.0
        path: C:/git-sdk-64-minimal
        repo: dscho/msys2-runtime
    - name: move MSYS2 runtime into the correct location
      shell: powershell
      run: |
        & "C:\Program Files\Git\bin\bash.exe" -c "cd /c/git-sdk-64-minimal && cp -R install/* ./"
    - name: Verify the MSYS2 runtime version
      shell: bash
      run: set -x && test 3.2.0-340.x86_64 = "$(uname.exe -r)"
    - name: download tracked files and build artifacts
      uses: actions/download-artifact@v2
      with:
        name: vs-artifacts-x64
        path: ${{github.workspace}}
    - name: extract tracked files and build artifacts
      shell: bash
      run: tar xf artifacts.tar.gz && tar xf tracked.tar.gz
    - name: test
      shell: bash
      env:
        NO_SVN_TESTS: 1
        GIT_TEST_SKIP_REBASE_P: 1
      run: ci/run-test-slice.sh ${{matrix.nr}} 10
    - name: ci/print-test-failures.sh
      if: failure()
      shell: bash
      run: ci/print-test-failures.sh
    - name: Upload failed tests' directories
      if: failure() && env.FAILED_TEST_ARTIFACTS != ''
      uses: actions/upload-artifact@v2
      with:
        name: failed-tests-windows
        path: ${{env.FAILED_TEST_ARTIFACTS}}
